# import dependencies
import os
import socket
import time

# ============================================= SERVER CONFIG VARS =================================================== #


SVR_HOST = "0.0.0.0"
SVR_PORT = 4020
SVR_BUF_SIZE = 1024

SVR_SOCKET = socket.socket()


def remap_svr():
    global SVR_HOST
    global SVR_PORT
    global SVR_BUF_SIZE
    SVR_HOST = str(input("HOST ~>: "))
    SVR_PORT = int(input("PORT ~>: "))
    SVR_BUF_SIZE = int(input("BUFFER SIZE ~>: "))
    init_server()


def kill_connection(client_sock, sock):
    try:
        client_sock.close()
        sock.close()
        print("Sockets killed ...")
        exit()
    except:
        print("failed to kill sockets, retrying...")
        kill_connection(client_sock, sock)


def send_commands(client_sock, sock):
    try:
        while True:
            bash_cmd = input("\n ~>$ ").encode()
            if bash_cmd.lower() == "kill svr":
                kill_connection(client_sock, sock)
                break

            client_sock.send(bash_cmd)
            # grab response
            client_response = client_sock.recv(SVR_BUF_SIZE).decode()
            print(client_response)
            if client_response == "cmd_error":
                init_server()

    except:
        SVR_SOCKET.close()
        exit()


def init_server():
    print("initialising svr")
    global SVR_SOCKET
    SVR_SOCKET = socket.socket()
    try:
        SVR_SOCKET = socket.socket()
        SVR_SOCKET.bind((SVR_HOST, SVR_PORT))
        SVR_SOCKET.listen(5)
        print(f"Listening on {SVR_HOST}:{SVR_PORT}")
        client_sock, client_add = SVR_SOCKET.accept()
        print(f"Inbound connection from {client_add[0]}:{client_add[1]} ")
        client_sock.send("bind_success".encode())
        time.sleep(5)
        ryd_code = client_sock.recv(SVR_BUF_SIZE).decode()
        print(ryd_code)
        # if ryd_code == "ready":
        send_commands(client_sock, SVR_SOCKET)
    except:
        print("Malformed, try re-config ...")
        SVR_SOCKET.close()


def test_sock():
    global SVR_SOCKET
    SVR_SOCKET.close()
    SVR_SOCKET.bind((SVR_HOST, SVR_PORT))
    SVR_SOCKET.listen(10)


def main():
    init_server()


main()
